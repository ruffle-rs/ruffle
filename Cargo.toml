[workspace]
members = [
    "core",
    "core/macros",
    "core/build_playerglobal",
    "desktop",
    "swf",
    "flv",
    "web",
    "web/packages/extension/safari",
    "wstr",
    "scanner",

    "exporter",
    "exporter/integration_tests",

    "frontend-utils",

    "render",
    "render/canvas",
    "render/naga-agal",
    "render/pixel_bender",
    "render/pixel_bender/assembly_tests",
    "render/wgpu",
    "render/webgl",

    "stub-report",

    "video",
    "video/software",
    "video/external",

    "tests",
    "tests/fs-tests-runner",
    "tests/input-format",
    "tests/socket-format",
    "tests/mocket",
    "tests/framework",
]
default-members = ["desktop"]
resolver = "2"

[workspace.package]
authors = ["Ruffle LLC <ruffle@ruffle.rs>"]
edition = "2021"
homepage = "https://ruffle.rs"
license = "MIT OR Apache-2.0"
repository = "https://github.com/ruffle-rs/ruffle"
version = "0.1.0"

[workspace.dependencies]
tracing = "0.1.41"
tracing-subscriber = { version = "0.3.20", features = ["env-filter"] }
naga = { version = "26.0.0", features = ["wgsl-out"] }
wgpu = "26.0.1"
egui = { git = "https://github.com/emilk/egui.git", branch = "main" }
clap = { version = "4.5.50", features = ["derive"] }
cpal = "0.16.0"
anyhow = "1.0"
gc-arena = { git = "https://github.com/kyren/gc-arena.git", rev = "08e08414249d5914dfc3b402d7eadc133e00ce56" }
slotmap = "1.0.7"
async-channel = "2.5.0"
bitflags = "2.10.0"
bytemuck = "1.24.0"
chrono = { version = "0.4.42", default-features = false }
enum-map = "2.7.3"
flate2 = "1.1.5"
futures = "0.3.31"
image = { version = "0.25.8", default-features = false }
js-sys = "0.3.78"
web-sys = "0.3.78"
log = "0.4"
num-derive = "0.4.2"
num-traits = "0.2.19"
serde = "1.0.228"
thiserror = "2.0.17"
url = "2.5.7"
# Make sure to match wasm-bindgen-cli version to this everywhere.
wasm-bindgen = "=0.2.101"
walkdir = "2.5.0"
tokio = "1.48.0"
# Switching from the `async-std` to the `tokio` runtime, which we depend on anyway.
rfd = { version = "0.15.4", default-features = false, features = ["tokio", "xdg-portal"] }
memmap2 = "0.9.9"
libtest-mimic = "0.8.1"
regex = "1.12.2"
toml = "0.9.7"
vfs = "0.12.2"
smallvec = { version = "1.15.1", features = ["const_new", "union"] }
serde_json = "1.0.145"
percent-encoding = "2.3.2"
approx = "0.5.1"
encoding_rs = "0.8.35"
byteorder = "1.5"
bitstream-io = "4.9.0"
indicatif = "0.17"
rayon = "1.11.0"
sha2 = "0.10.9"
indexmap = "2.11.4"
fnv = "1.0.7"
fluent-templates = "0.13.2"
lzma-rs = "0.3.0"
tempfile = "3.23.0"
tracing-wasm = "0.2.1"

[workspace.lints.rust]
# Clippy nightly often adds new/buggy lints that we want to ignore.
# Don't warn about these new lints on stable.
renamed_and_removed_lints = "allow"
unknown_lints = "allow"

[workspace.lints.clippy]
# Notice: this is an important lint in Ruffle as we have a lot of trivially
# copyable objects (e.g. Gc pointers). It may produce false positives depending
# on platform.
# In case it happens, add `#[allow(clippy::trivially_copy_pass_by_ref)]` and
# add a comment explaining why.
trivially_copy_pass_by_ref = "deny"

# LONG-TERM: These lints are unhelpful.
manual_map = "allow"             # Less readable: Suggests `opt.map(..)` instead of `if let Some(opt) { .. }`
manual_range_contains = "allow"  # Less readable: Suggests `(a..b).contains(n)` instead of `n >= a && n < b`
assigning_clones = "allow"       # Sometimes useful, but more often than not it doesn't do anything as
                                 # we overwrite an empty item. And sometimes it can even be a footgun
                                 # by keeping big allocations alive.

# Don't optimize build scripts and macros.
[profile.release.build-override]
opt-level = 0

[profile.dev]
panic = "unwind"

[profile.release]
panic = "abort"

[profile.dev.package.h263-rs]
opt-level = 3

[profile.dev.package.h263-rs-yuv]
opt-level = 3

[profile.dev.package.nihav_core]
opt-level = 3

[profile.dev.package.nihav_codec_support]
opt-level = 3

[profile.dev.package.nihav_duck]
opt-level = 3

# TODO: Set rustflags here instead of in tools/build_wasm.ts, when that
# feature becomes stable. See: https://github.com/rust-lang/cargo/issues/10271
# Until then, these custom profiles let cargo keep the build cache alive
# across "dual-wasm" builds, separating it for the two .wasm modules.
[profile.web-wasm-mvp]
inherits = "release"

[profile.web-wasm-extensions]
inherits = "release"

[profile.ci]
inherits = "release"
debug-assertions = true
overflow-checks = true
# "Not too slow to compile, fast enough to run."
opt-level = 2
# Takes too long, especially on Windows, with marginal benefit otherwise.
lto = "off"
# This is also set with higher authority in `test_rust.yml`.
incremental = true
# Right between the defaults of 16 and 256, for crate fragment caching.
codegen-units = 64
