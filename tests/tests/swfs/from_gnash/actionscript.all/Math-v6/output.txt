SWF6

[Math.as debug-22403-05c7ba106]
PASSED: typeof(mathObj) == 'undefined' [./Math.as:39]
PASSED: typeof(Math) == 'object' [./Math.as:41]
PASSED: typeof(Math.__proto__) == 'object' [./Math.as:42]
PASSED: Math.__proto__ == Object.prototype [./Math.as:43]
PASSED: count == 0 [./Math.as:47]
PASSED: typeOf(Math.abs) == 'function' [./Math.as:50]
PASSED: typeOf(Math.acos) == 'function' [./Math.as:51]
PASSED: typeOf(Math.asin) == 'function' [./Math.as:52]
PASSED: typeOf(Math.atan) == 'function' [./Math.as:53]
PASSED: typeOf(Math.ceil) == 'function' [./Math.as:54]
PASSED: typeOf(Math.cos) == 'function' [./Math.as:55]
PASSED: typeOf(Math.exp) == 'function' [./Math.as:56]
PASSED: typeOf(Math.floor) == 'function' [./Math.as:57]
PASSED: typeOf(Math.log) == 'function' [./Math.as:58]
PASSED: typeOf(Math.random) == 'function' [./Math.as:59]
PASSED: typeOf(Math.round) == 'function' [./Math.as:60]
PASSED: typeOf(Math.sin) == 'function' [./Math.as:61]
PASSED: typeOf(Math.sqrt) == 'function' [./Math.as:62]
PASSED: typeOf(Math.tan) == 'function' [./Math.as:63]
PASSED: typeOf(Math.atan2) == 'function' [./Math.as:64]
PASSED: typeOf(Math.max) == 'function' [./Math.as:65]
PASSED: typeOf(Math.min) == 'function' [./Math.as:66]
PASSED: typeOf(Math.pow) == 'function' [./Math.as:67]
PASSED: typeOf(Math.E) == 'number' [./Math.as:68]
PASSED: typeOf(Math.LN2) == 'number' [./Math.as:69]
PASSED: typeOf(Math.LOG2E) == 'number' [./Math.as:70]
PASSED: typeOf(Math.LN10) == 'number' [./Math.as:71]
PASSED: typeOf(Math.LOG10E) == 'number' [./Math.as:72]
PASSED: typeOf(Math.PI) == 'number' [./Math.as:73]
PASSED: typeOf(Math.SQRT1_2) == 'number' [./Math.as:74]
PASSED: typeOf(Math.SQRT2) == 'number' [./Math.as:75]
PASSED: Math.E.toString() == "2.71828182845905" [./Math.as:95]
PASSED: Math.LN2.toString() == "0.693147180559945" [./Math.as:96]
PASSED: Math.LOG2E.toString() == "1.44269504088896" [./Math.as:97]
PASSED: Math.LN10.toString() == "2.30258509299405" [./Math.as:98]
PASSED: Math.LOG10E.toString() == "0.434294481903252" [./Math.as:99]
PASSED: Math.PI.toString() == "3.14159265358979" [./Math.as:100]
PASSED: Math.SQRT1_2.toString() == "0.707106781186548" [./Math.as:101]
PASSED: Math.SQRT2.toString() == "1.4142135623731" [./Math.as:102]
PASSED: Math.abs(15) == 15 [./Math.as:134]
PASSED: Math.abs(-15) == 15 [./Math.as:135]
PASSED: Math.abs(plusinf) == plusinf [./Math.as:136]
PASSED: Math.abs(minusinf) == plusinf [./Math.as:137]
PASSED: Math.abs(notanumber).toString() == "NaN" [./Math.as:138]
PASSED: Math.abs(undefined).toString() == "0" [./Math.as:141]
PASSED: Math.abs().toString() == "NaN" [./Math.as:145]
PASSED: Math.acos(0).toString() == pi_2s [./Math.as:151]
PASSED: Math.acos(1) == 0 [./Math.as:152]
PASSED: Math.acos(0.5).toString() == "1.0471975511966" [./Math.as:153]
PASSED: Math.acos(-0.5).toString() == "2.0943951023932" [./Math.as:154]
PASSED: Math.acos(-1).toString() == pis [./Math.as:155]
PASSED: Math.acos(2).toString() == "NaN" [./Math.as:156]
PASSED: Math.acos(-2).toString() == "NaN" [./Math.as:157]
PASSED: Math.acos(undefined).toString() == "1.5707963267949" [./Math.as:160]
PASSED: Math.acos(acos(2)).toString() == "1.5707963267949" [./Math.as:161]
PASSED: Math.acos(undefined).toString() == "1.5707963267949" [./Math.as:162]
PASSED: Math.acos(1.0/0.0).toString() == "NaN" [./Math.as:169]
PASSED: Math.acos(-1.0/0.0).toString() == "NaN" [./Math.as:170]
PASSED: Math.acos(plusinf).toString() == "NaN" [./Math.as:171]
PASSED: Math.acos(minusinf).toString() == "NaN" [./Math.as:172]
PASSED: Math.acos(notanumber).toString() == "NaN" [./Math.as:173]
PASSED: Math.acos().toString() == "NaN" [./Math.as:174]
PASSED: Math.asin(0) == 0 [./Math.as:180]
PASSED: Math.asin(1).toString() == pi_2s [./Math.as:181]
PASSED: Math.asin(-1).toString() == "-" + pi_2s [./Math.as:182]
PASSED: Math.asin(0.5).toString() == "0.523598775598299" [./Math.as:183]
PASSED: Math.asin(-0.5).toString() == "-0.523598775598299" [./Math.as:184]
PASSED: Math.asin(2).toString() == "NaN" [./Math.as:185]
PASSED: Math.asin(-2).toString() == "NaN" [./Math.as:186]
PASSED: Math.asin(plusinf).toString() == "NaN" [./Math.as:187]
PASSED: Math.asin(minusinf).toString() == "NaN" [./Math.as:188]
PASSED: Math.asin(notanumber).toString() == "NaN" [./Math.as:189]
PASSED: Math.asin(undefined).toString() == "0" [./Math.as:191]
PASSED: Math.asin().toString() == "NaN" [./Math.as:195]
PASSED: Math.atan(0) == 0 [./Math.as:201]
PASSED: Math.atan(0.5).toString() == "0.463647609000806" [./Math.as:202]
PASSED: Math.atan(-0.5).toString() == "-0.463647609000806" [./Math.as:203]
PASSED: Math.atan(1).toString() == "0.785398163397448" [./Math.as:204]
PASSED: Math.atan(-1).toString() == "-0.785398163397448" [./Math.as:205]
PASSED: Math.atan(2).toString() == "1.10714871779409" [./Math.as:206]
PASSED: Math.atan(-2).toString() == "-1.10714871779409" [./Math.as:207]
PASSED: Math.atan(plusinf).toString() == pi_2s [./Math.as:208]
PASSED: Math.atan(minusinf).toString() == "-" + pi_2s [./Math.as:209]
PASSED: Math.atan(notanumber).toString() == "NaN" [./Math.as:210]
PASSED: Math.atan(undefined).toString() == "0" [./Math.as:212]
PASSED: Math.atan().toString() == "NaN" [./Math.as:216]
PASSED: Math.ceil(0) == 0 [./Math.as:222]
PASSED: Math.ceil(1) == 1 [./Math.as:223]
PASSED: Math.ceil(-1) == -1 [./Math.as:224]
PASSED: Math.ceil(0.1) == 1 [./Math.as:225]
PASSED: Math.ceil(0.5) == 1 [./Math.as:226]
PASSED: Math.ceil(0.9) == 1 [./Math.as:227]
PASSED: Math.ceil(-0.1) == 0 [./Math.as:228]
PASSED: Math.ceil(-0.5) == 0 [./Math.as:229]
PASSED: Math.ceil(-0.9) == 0 [./Math.as:230]
PASSED: Math.ceil(notanumber).toString() == "NaN" [./Math.as:231]
PASSED: Math.ceil(plusinf) == plusinf [./Math.as:232]
PASSED: Math.ceil(minusinf) == minusinf [./Math.as:233]
PASSED: Math.ceil(undefined).toString() == "0" [./Math.as:235]
PASSED: Math.ceil().toString() == "NaN" [./Math.as:239]
PASSED: Math.cos(0) == 1 [./Math.as:245]
PASSED: Math.cos(Math.PI / 2) < delta && Math.cos(Math.PI / 2) > -delta [./Math.as:248]
PASSED: Math.cos(-Math.PI / 2) < delta && -Math.cos(Math.PI / 2) > -delta [./Math.as:249]
PASSED: Math.cos(Math.PI) == -1 [./Math.as:250]
PASSED: Math.cos(-Math.PI) == -1 [./Math.as:251]
PASSED: Math.cos(Math.PI * 2) == 1 [./Math.as:252]
PASSED: Math.cos(-Math.PI * 2) == 1 [./Math.as:253]
PASSED: Math.cos(1).toString() == "0.54030230586814" [./Math.as:254]
PASSED: Math.cos(-1).toString() == "0.54030230586814" [./Math.as:255]
PASSED: Math.cos(plusinf).toString() == "NaN" [./Math.as:256]
PASSED: Math.cos(minusinf).toString() == "NaN" [./Math.as:257]
PASSED: Math.cos(notanumber).toString() == "NaN" [./Math.as:258]
PASSED: Math.cos(undefined).toString() == "1" [./Math.as:260]
PASSED: Math.cos().toString() == "NaN" [./Math.as:264]
PASSED: Math.exp(0) == 1 [./Math.as:270]
PASSED: Math.exp(1).toString() == "2.71828182845905" [./Math.as:271]
PASSED: Math.exp(2).toString() == "7.38905609893065" [./Math.as:272]
PASSED: Math.exp(-1).toString() == "0.367879441171442" [./Math.as:273]
PASSED: Math.exp(plusinf).toString() == "Infinity" [./Math.as:274]
PASSED: Math.exp(minusinf) == 0 [./Math.as:275]
PASSED: Math.exp(notanumber).toString() == "NaN" [./Math.as:276]
PASSED: Math.exp(undefined).toString() == "1" [./Math.as:278]
PASSED: Math.exp().toString() == "NaN" [./Math.as:282]
PASSED: Math.floor(0) == 0 [./Math.as:288]
PASSED: Math.floor(0.1) == 0 [./Math.as:289]
PASSED: Math.floor(0.5) == 0 [./Math.as:290]
PASSED: Math.floor(0.9) == 0 [./Math.as:291]
PASSED: Math.floor(1) == 1 [./Math.as:292]
PASSED: Math.floor(-0.1) == -1 [./Math.as:293]
PASSED: Math.floor(-0.5) == -1 [./Math.as:294]
PASSED: Math.floor(-0.9) == -1 [./Math.as:295]
PASSED: Math.floor(-2) == -2 [./Math.as:296]
PASSED: Math.floor(plusinf).toString() == "Infinity" [./Math.as:297]
PASSED: Math.floor(minusinf).toString() == "-Infinity" [./Math.as:298]
PASSED: Math.floor(notanumber).toString() == "NaN" [./Math.as:299]
PASSED: Math.floor(undefined).toString() == "0" [./Math.as:301]
PASSED: Math.floor().toString() == "NaN" [./Math.as:305]
PASSED: Math.log(0).toString() == "-Infinity" [./Math.as:311]
PASSED: Math.log(1) == 0 [./Math.as:312]
PASSED: Math.log(Math.E) == 1 [./Math.as:313]
PASSED: Math.log(2).toString() == "0.693147180559945" [./Math.as:314]
PASSED: Math.log(-1).toString() == "NaN" [./Math.as:315]
PASSED: Math.log(plusinf).toString() == "Infinity" [./Math.as:316]
PASSED: Math.log(minusinf).toString() == "NaN" [./Math.as:317]
PASSED: Math.log(notanumber).toString() == "NaN" [./Math.as:318]
PASSED: Math.log(undefined).toString() == "-Infinity" [./Math.as:320]
PASSED: Math.log().toString() == "NaN" [./Math.as:324]
PASSED: math_random >= 0.0 && math_random < 1.0 [./Math.as:331]
PASSED: math_random2 >= 0.0 && math_random2 < 1.0 [./Math.as:333]
PASSED: math_random != math_random2 [./Math.as:334]
PASSED: Math.round(0) == 0 [./Math.as:340]
PASSED: Math.round(0.1) == 0 [./Math.as:341]
PASSED: Math.round(0.49) == 0 [./Math.as:342]
PASSED: Math.round(0.5) == 1 [./Math.as:343]
PASSED: Math.round(0.9) == 1 [./Math.as:344]
PASSED: Math.round(1) == 1 [./Math.as:345]
PASSED: Math.round(-0.1) == 0 [./Math.as:346]
PASSED: Math.round(-0.5) == 0 [./Math.as:347]
PASSED: Math.round(-0.9) == -1 [./Math.as:348]
PASSED: Math.round(plusinf).toString() == "Infinity" [./Math.as:349]
PASSED: Math.round(minusinf).toString() == "-Infinity" [./Math.as:350]
PASSED: Math.round(notanumber).toString() == "NaN" [./Math.as:351]
PASSED: isNaN(Math.round('')) [./Math.as:352]
PASSED: typeof(Math.round('')) == 'number' [./Math.as:353]
PASSED: Math.round(undefined).toString() == "0" [./Math.as:355]
PASSED: Math.round().toString() == "NaN" [./Math.as:359]
PASSED: Math.sin(0) == 0 [./Math.as:367]
PASSED: Math.sin(Math.PI / 2) == 1 [./Math.as:368]
PASSED: Math.sin(Math.PI) < delta && Math.sin(Math.PI) > -delta [./Math.as:372]
PASSED: Math.sin(-Math.PI) < delta && Math.sin(-Math.PI) > -delta [./Math.as:373]
PASSED: Math.sin(1).toString() == "0.841470984807897" [./Math.as:374]
PASSED: Math.sin(-1).toString() == "-0.841470984807897" [./Math.as:375]
PASSED: Math.sin(100).toString() == "-0.506365641109759" [./Math.as:377]
PASSED: Math.sin(-100).toString() == "0.506365641109759" [./Math.as:378]
PASSED: Math.sin(plusinf).toString() == "NaN" [./Math.as:379]
PASSED: Math.sin(minusinf).toString() == "NaN" [./Math.as:380]
PASSED: Math.sin(notanumber).toString() == "NaN" [./Math.as:381]
PASSED: Math.sin(undefined).toString() == "0" [./Math.as:383]
PASSED: Math.sin().toString() == "NaN" [./Math.as:387]
PASSED: Math.sqrt(0) == 0 [./Math.as:393]
PASSED: Math.sqrt(1) == 1 [./Math.as:394]
PASSED: Math.sqrt(-1).toString() == "NaN" [./Math.as:395]
PASSED: Math.sqrt(100) == 10 [./Math.as:396]
PASSED: Math.sqrt(0.01) == 0.1 [./Math.as:397]
PASSED: Math.sqrt(2).toString() == "1.4142135623731" [./Math.as:398]
PASSED: Math.sqrt(plusinf).toString() == "Infinity" [./Math.as:399]
PASSED: Math.sqrt(minusinf).toString() == "NaN" [./Math.as:400]
PASSED: Math.sqrt(notanumber).toString() == "NaN" [./Math.as:401]
PASSED: Math.sqrt(undefined).toString() == "0" [./Math.as:403]
PASSED: Math.sqrt().toString() == "NaN" [./Math.as:407]
PASSED: Math.tan(0) == 0 [./Math.as:413]
PASSED: Math.tan(Math.PI / 2) > 1/delta || Math.tan(Math.PI / 2) < -1/delta [./Math.as:415]
PASSED: Math.tan(Math.PI) < delta && Math.tan(Math.PI) > -delta [./Math.as:417]
PASSED: Math.tan(-Math.PI) < delta && Math.tan(-Math.PI) > -delta [./Math.as:418]
PASSED: Math.tan(1).toString() == "1.5574077246549" [./Math.as:419]
PASSED: Math.tan(100).toString() == "-0.587213915156929" [./Math.as:421]
PASSED: Math.tan(-100).toString() == "0.587213915156929" [./Math.as:422]
PASSED: Math.tan(plusinf).toString() == "NaN" [./Math.as:423]
PASSED: Math.tan(minusinf).toString() == "NaN" [./Math.as:424]
PASSED: Math.tan(notanumber).toString() == "NaN" [./Math.as:425]
PASSED: Math.tan(undefined).toString() == "0" [./Math.as:427]
PASSED: Math.tan().toString() == "NaN" [./Math.as:431]
PASSED: Math.atan2().toString() == "NaN" [./Math.as:437]
PASSED: Math.atan2(1).toString() == "NaN" [./Math.as:438]
PASSED: Math.atan2(0, 1) == 0 [./Math.as:440]
PASSED: Math.atan2(1, 1).toString() == pi_4s [./Math.as:441]
PASSED: Math.atan2(1, 0).toString() == pi_2s [./Math.as:442]
PASSED: Math.atan2(1, -1).toString() == pi_34.toString() [./Math.as:443]
PASSED: Math.atan2(0, -1).toString() == pis [./Math.as:444]
PASSED: Math.atan2(-1, -1).toString() == "-" + pi_34.toString() [./Math.as:445]
PASSED: Math.atan2(-1, 0).toString() == "-" + pi_2s [./Math.as:446]
PASSED: Math.atan2(-1, 1).toString() == "-" + pi_4s [./Math.as:447]
PASSED: Math.atan2(0, plusinf) == 0 [./Math.as:449]
PASSED: Math.atan2(plusinf, plusinf).toString() == pi_4s [./Math.as:450]
PASSED: Math.atan2(plusinf, 0).toString() == pi_2s [./Math.as:451]
PASSED: Math.atan2(plusinf, minusinf).toString() == pi_34.toString() [./Math.as:452]
PASSED: Math.atan2(0, minusinf).toString() == pis [./Math.as:453]
PASSED: Math.atan2(minusinf, minusinf).toString() == "-" + pi_34.toString() [./Math.as:454]
PASSED: Math.atan2(minusinf, 0).toString() == "-" + pi_2s [./Math.as:455]
PASSED: Math.atan2(minusinf, plusinf).toString() == "-" + pi_4s [./Math.as:456]
PASSED: Math.atan2(notanumber,1).toString() == "NaN" [./Math.as:458]
PASSED: Math.atan2(1,notanumber).toString() == "NaN" [./Math.as:459]
PASSED: Math.atan2(undefined,1).toString() == "0" [./Math.as:461]
PASSED: Math.atan2(1,undefined).toString() == "1.5707963267949" [./Math.as:462]
PASSED: Math.max().toString() == "-Infinity" [./Math.as:472]
PASSED: Math.max(1).toString() == "NaN" [./Math.as:473]
PASSED: Math.max(1,2) == 2 [./Math.as:474]
PASSED: Math.max(2,1) == 2 [./Math.as:475]
PASSED: Math.max(1,2,3) == 2 [./Math.as:476]
PASSED: Math.max(-1,-2) == -1 [./Math.as:477]
PASSED: Math.max(-2,-1) == -1 [./Math.as:478]
PASSED: Math.max(0,plusinf).toString() == "Infinity" [./Math.as:479]
PASSED: Math.max(0,minusinf) == 0 [./Math.as:480]
PASSED: Math.max(plusinf,minusinf).toString() == "Infinity" [./Math.as:481]
PASSED: Math.max(0,undefined).toString() == "0" [./Math.as:483]
PASSED: Math.max(0,notanumber).toString() == "NaN" [./Math.as:487]
PASSED: Math.min().toString() == "Infinity" [./Math.as:493]
PASSED: Math.min(1).toString() == "NaN" [./Math.as:494]
PASSED: Math.min(1,2) == 1 [./Math.as:495]
PASSED: Math.min(2,1) == 1 [./Math.as:496]
PASSED: Math.min(1,2,3) == 1 [./Math.as:497]
PASSED: Math.min(1,2,0) == 1 [./Math.as:498]
PASSED: Math.min(-1,-2) == -2 [./Math.as:499]
PASSED: Math.min(-2,-1) == -2 [./Math.as:500]
PASSED: Math.min(0,plusinf) == 0 [./Math.as:501]
PASSED: Math.min(0,minusinf).toString() == "-Infinity" [./Math.as:502]
PASSED: Math.min(plusinf,minusinf).toString() == "-Infinity" [./Math.as:503]
PASSED: Math.min(0,undefined).toString() == "0" [./Math.as:505]
PASSED: Math.min(0,notanumber).toString() == "NaN" [./Math.as:509]
PASSED: Math.pow().toString() == "NaN" [./Math.as:515]
PASSED: Math.pow(0).toString() == "NaN" [./Math.as:516]
FAILED: expected: 1 obtained: NaN [./Math.as:517]
PASSED: Math.pow(2).toString() == "NaN" [./Math.as:518]
PASSED: Math.pow(plusinf).toString() == "NaN" [./Math.as:519]
PASSED: Math.pow(minusinf).toString() == "NaN" [./Math.as:520]
PASSED: Math.pow(undefined).toString() == "NaN" [./Math.as:521]
PASSED: Math.pow(notanumber).toString() == "NaN" [./Math.as:522]
PASSED: Math.pow(1,10) == 1 [./Math.as:523]
PASSED: Math.pow(10,1) == 10 [./Math.as:524]
PASSED: Math.pow(1,-10) == 1 [./Math.as:525]
PASSED: Math.pow(-10,1) == -10 [./Math.as:526]
PASSED: Math.pow(2, 10) == 1024 [./Math.as:527]
FAILED: expected: Math.SQRT2.toString() obtained: 1.41421356237309 [./Math.as:529]
FAILED: expected: Math.SQRT1_2.toString() obtained: 0.707106781186547 [./Math.as:530]
PASSED: Math.pow(-2, 0) == 1 [./Math.as:531]
PASSED: Math.pow(-2, 1) == -2 [./Math.as:532]
PASSED: Math.pow(-2, 2) == 4 [./Math.as:533]
PASSED: Math.pow(-2, 3) == -8 [./Math.as:534]
PASSED: Math.pow(-2, -1) == -0.5 [./Math.as:535]
PASSED: Math.pow(-2, -2) == 0.25 [./Math.as:536]
PASSED: Math.pow(-2, 0.5).toString() == "NaN" [./Math.as:538]
PASSED: Math.pow(-2, -0.5).toString() == "NaN" [./Math.as:539]
#passed: 269
#failed: 3
#total tests run: 272
